<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="hoa.process~" module="hoa">

	<digest>
		patcher loader for multichannel processing.
	</digest>

	<description>
		<o>hoa.process~</o> helps the modularization of patches for ambisonic or plane waves processing. <o>hoa.process~</o> is a kind of <o>poly~</o> object particulary suitable for multichannel ambisonic or plane wave processing. Create a patch/effect/operator, then parallelize it with the <o>hoa.process~</o>
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Julien Colafrancesco, Pierre Guillot, Eliott Paris.</metadata>
		<metadata name="tag">ambisonics</metadata>
		<metadata name="tag">hoa objects</metadata>
		<metadata name="tag">msp</metadata>
	</metadatalist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="ambisonic-order/number-of-channels" optional="0" type="int">
			<digest>
				the ambisonic order or the number of channels.
			</digest>
			<description>
				First argument is the ambisonic order or the number of channels depending on the third argument (process mode : harmonics/planewaves).
				In planewaves mode (2d/3d) the number of instances will be equal to the number of channel specified by this argument.
				In harmonics mode, the number of instances will be equal to the number of harmonics depending on the order of decomposition.
				In 2d it will be equal to (ambisonic-order*2 + 1), in 2d to ((ambisonic-order+1)*(ambisonic-order+1))
			</description>
		</objarg>
		<objarg name="patcher-name" optional="0" type="symbol">
			<digest>
				Name of a patcher to be loaded.
			</digest>
			<description>
				The second argument must specify the name of a patcher to be loaded which already exists and is in the Max search path.
			</description>
		</objarg>
		<objarg name="process-mode" optional="0" type="symbol">
			<digest>
				process mode.
			</digest>
			<description>
				can be <b>harmonics</b>/<b>planewaves</b>. Use the <b>harmonics</b> mode to work in the Ambisonics domain, <b>planewaves</b> if your process is in the planewave domain.
			</description>
		</objarg>
		<objarg name="list-of-argument-values" optional="1" type="float/int/symbol">
			<digest>
				argument to send to the loaded patches.
			</digest>
			<description>
				Argument to be sent to the loaded patches. These arguments can be retrieve by (#1, #2... patcher system) or/and with the help of the <o>hoa.thisprocess~</o> object.
			</description>
		</objarg>
		<objarg name="attribute-keys-and-list-of-argument-values" optional="1" type="float/int/symbol">
			<digest>
				attributes to send to the loaded patches.
			</digest>
			<description>
				Attributes to be sent to the loaded patches. These arguments can be retrieve with the help of the <o>hoa.thisprocess~</o> object.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(mouse)">
			<arglist />
			<digest>
				double-click to open a display window to view loaded patch contents.
			</digest>
			<description>
				Double-clicking on the <o>hoa.process~</o> opens a display window of the instance that is currently the target.
			</description>
		</method>
		<method name="anything">
			<arg name="message" optional="0" type="list" />
			<digest>
				Send a message to the patcher loaded into the <o>hoa.process~</o> object.
			</digest>
			<description>
				Sends a message to the patcher loaded into the <o>hoa.process~</o> object. The result of the message is determined by the loaded patcher.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Send a <m>bang</m> message to the patcher loaded into the <o>hoa.process~</o> object.
			</digest>
			<description>
				Sends a <m>bang</m> to the patcher loaded into the <o>hoa.process~</o> object. The result of the message is determined by the loaded patcher.
			</description>
		</method>
		<method name="float">
			<arg name="number" optional="0" type="float" />
			<digest>
				Send a <m>float</m> message to the patcher loaded into the <o>hoa.process~</o> object.
			</digest>
			<description>
				Sends a <m>float</m> to the patcher loaded into the <o>hoa.process~</o> object. The result of the message is determined by the loaded patcher.
			</description>
		</method>
		<method name="int">
			<arg name="number" optional="0" type="int" />
			<digest>
				Send a <m>int</m> message to the patcher loaded into the <o>hoa.process~</o> object.
			</digest>
			<description>
				Sends a <m>int</m> to the patcher loaded into the <o>hoa.process~</o> object. The result of the message is determined by the loaded patcher.
			</description>
		</method>
		<method name="list">
			<arg name="message" optional="0" type="list" />
			<digest>
				Send a <m>list</m> message to the patcher loaded into the <o>hoa.process~</o> object.
			</digest>
			<description>
				Sends a <m>float</m> to the patcher loaded into the <o>hoa.process~</o> object. The result of the message is determined by the loaded patcher.
			</description>
		</method>
		<method name="mute">
			<arg name="instance-index" optional="0" type="int" />
			<arg name="on/off-flag" optional="0" type="int" />
			<digest>
				Mute processing for a patcher instance.
			</digest>
			<description>
				Turns off signal processing for the specified instance of a patcher loaded by the <o>hoa.process~</o> object and sends a bang message to the <o>hoa.thisprocess~</o> object for the specified instance.
				Mute target numbering works like <m>target</m> method (see the <m>target</m> message).
				Sending a 0 as the last argument turns the patcher instance on. The message mute all 1 mutes all instances, and mute all 0 turns on signal processing for all instances of the patcher.
			</description>
		</method>
		<method name="mutemap">
			<arg name="outlet-number" optional="0" type="int" />
			<digest>
				Report mutes out of a specified <o>hoa.process~</o> message outlet.
			</digest>
			<description>
				Report voice mutes out of a specified <o>hoa.process~</o> message outlet
			</description>
		</method>
		<method name="open">
			<arg name="instance-index" optional="1" type="int" />
			<digest>
				open a patcher instance for viewing.
			</digest>
			<description>
				The word open, followed by a number, opens the specified instance of the patcher (depending on the process mode). You can view the activity of any instance of the patcher up to the number of loaded instances. With no arguments, the open message opens the instance that is currently the target (see the <m>target</m> message).
			</description>
		</method>
		<method name="signal">
			<arglist />
			<digest>
				output signal in the corresponding <o>hoa.in~</o> object in the loaded patch.
			</digest>
			<description>
				Output signal in the corresponding <o>hoa.in~</o> object in the loaded patches.
			</description>
		</method>
		<method name="target">
			<arg name="instance-index" optional="0" type="int/symbol" />
			<arg name="instance-index-bis" optional="1" type="int" />
			<digest>
				target messages to a specific loaded instance.
			</digest>
			<description>
				The hoa.process~ instance that will receive subsequent messages
				(other than messages specifically used by the hoa.process~ object itself) arriving at the hoa.process~ object's inlets.
				Targeted messages only works for <o>hoa.in</o> objects that have an <b>extra</b> attribute set.
				The target numbering/arguments depends on the current mode and the number of loaded instances.
				<ul>
				<li> In <m>planewaves</m> mode (2d/3d), the message <b>target 1</b> will target the first instance corresponding to the first channel.</li>
				<li> In 2d <m>harmonics</m> mode, target argument correspond to the harmonic index, the harmonics index go to <b>-order</b> to <b>order</b>.</li>
				<li> In 3d <m>harmonics</m> mode, the <m>target</m> message takes two arguments. First one is the ambisonic hdegree (between 0 and the <b>order</b>), the second one correspond to the harmonic index (from <b>-order</b> to <b>order</b>).</li>
				</ul>
				The message <b>target all</b> will target messages to all of the loaded instances.
				The message <b>target none</b> disable input to all instances.
			</description>
		</method>
		<method name="wclose">
			<arg name="instance-index" optional="1" type="int" />
			<digest>
				close a numbered patcher instance's window.
			</digest>
			<description>
				Closes the window for the numbered instance specified by the argument (depending on the process mode).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>hoa.process~</o> helps the modularization of patches for ambisonic or plane waves processing. <o>hoa.process~</o> is a kind of <o>poly~</o> object particulary suitable for multichannel ambisonic or plane wave processing. Create a patch/effect/operator, then parallelize it with the <o>hoa.process~</o>
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="hoa.in~" />
		<seealso name="hoa.in" />
		<seealso name="hoa.out" />
		<seealso name="hoa.out~" />
		<seealso name="hoa.thisprocess~" />
		<seealso name="poly~" />
		<seealso name="patcher" />
	</seealsolist>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>hoa.process~</o> helps the modularization of patches for ambisonic or plane waves processing. <o>hoa.process~</o> is a kind of <o>poly~</o> object particulary suitable for multichannel ambisonic or plane wave processing. Create a patch/effect/operator, then parallelize it with the <o>hoa.process~</o>
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
			</description>
		</entry>
	</misc>

</c74object>