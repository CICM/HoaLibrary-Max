<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="hoa.dac~" module="hoa">

	<digest>
		A custom dac~ object with MathLab syntax.
	</digest>

	<description>
		<o>hoa.dac~</o> is a wrapped <o>dac~</o> object (Digital-To-Analog-Converter) through which you will route all signals from MSP out to your computer speakers or audio hardware to be audible to the human ear. It also gives you access to the Audio Status window which controls your audio settings and hardware. Unlike <o>dac~</o> object, you can use a mathLab syntax to set channel routing. ex : "1:1
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Julien Colafrancesco, Pierre Guillot, Eliott Paris.</metadata>
		<metadata name="tag">ambisonics</metadata>
		<metadata name="tag">hoa objects</metadata>
		<metadata name="tag">audio</metadata>
		<metadata name="tag">msp</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				input channel and incoming messages.
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="outputs" optional="1" type="int/symbol">
			<digest>
				Output routing or/and bus name
			</digest>
			<description>
				You can create a <o>hoa.dac~</o> object that uses one or more audio output channel numbers between 1 and 512. These numbers refer to logical channels and can be dynamically reassigned to physical device channels of a particular driver using either the Audio Status window, its I/O Mappings subwindow, or an adstatus object with an output keyword argument. Arguments, If the compu
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(mouse)">
			<arglist />
			<digest>
				Double-click to open the Audio Status window
			</digest>
			<description>
			</description>
		</method>
		<method name="int">
			<arg name="damp" optional="0" type="int" />
			<digest>
				Enable/disable audio processing
			</digest>
			<description>
				A non-zero number turns on audio processing in all loaded patches. 0 turns off audio processing in all loaded patches.
			</description>
		</method>
		<method name="list">
			<arg name="freeze-onoff" optional="0" type="list" />
			<digest>
				Enable/disable audio processing
			</digest>
			<description>
				List comprised of integers, sets the logical output channels for each signal inlet in order from left to right.
			</description>
		</method>
		<method name="open">
			<arglist />
			<digest>
				Opens the Audio Status window.
			</digest>
			<description>
				Opens the Audio Status window.
			</description>
		</method>
		<method name="signal">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				The <m>signal</m> A signal coming into an inlet of dac~ is sent to the audio output channel corresponding to the inlet. The signal must be between -1 and 1 to avoid clipping by the DAC.
			</description>
		</method>
		<method name="start">
			<arglist />
			<digest>
				Turns on audio processing in all loaded patches.
			</digest>
			<description>
				Turns on audio processing in all loaded patches.
			</description>
		</method>
		<method name="startwindow">
			<arglist />
			<digest>
				Enable audio processing in local patch and subpatches only.
			</digest>
			<description>
				Turns on audio processing only in the patch in which this <o>hoa.dac~</o> is located, and in subpatches of that patch. Turns off audio processing in all other patches.
			</description>
		</method>
		<method name="stop">
			<arglist />
			<digest>
				Turns off audio processing in all loaded patches.
			</digest>
			<description>
				Turns off audio processing in all loaded patches.
			</description>
		</method>
		<method name="wclose">
			<arglist />
			<digest>
				Close the Audio Status window.
			</digest>
			<description>
				Close the Audio Status window.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		<o>hoa.dac~</o> is a wrapped <o>dac~</o> object (Digital-To-Analog-Converter) through which you will route all signals from MSP out to your computer speakers or audio hardware to be audible to the human ear. It also gives you access to the Audio Status window which controls your audio settings and hardware. Unlike <o>dac~</o> object, you can use a mathLab syntax to set channel routing. ex : "1:1
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="dac~" />
		<seealso name="adc~" />
		<seealso name="adstatus" />
		<seealso name="ezdac~" />
	</seealsolist>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		<o>hoa.dac~</o> is a wrapped <o>dac~</o> object (Digital-To-Analog-Converter) through which you will route all signals from MSP out to your computer speakers or audio hardware to be audible to the human ear. It also gives you access to the Audio Status window which controls your audio settings and hardware. Unlike <o>dac~</o> object, you can use a mathLab syntax to set channel routing. ex : "1:1
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
			</description>
		</entry>
	</misc>

</c74object>